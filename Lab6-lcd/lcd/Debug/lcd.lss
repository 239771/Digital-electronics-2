
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003e4  00000478  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  00000482  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000482  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000120a  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096e  00000000  00000000  000017a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f0  00000000  00000000  00002114  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002904  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b7  00000000  00000000  00002a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088a  00000000  00000000  00002f53  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  000037dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ee       	ldi	r30, 0xE4	; 228
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <main>
  9e:	0c 94 f0 01 	jmp	0x3e0	; 0x3e0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_gotoxy>:
 124:	61 11       	cpse	r22, r1
 126:	04 c0       	rjmp	.+8      	; 0x130 <lcd_gotoxy+0xc>
 128:	80 58       	subi	r24, 0x80	; 128
 12a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 12e:	08 95       	ret
 130:	80 54       	subi	r24, 0x40	; 64
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clrscr>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_putc>:
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 146:	08 95       	ret

00000148 <lcd_puts>:
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	fc 01       	movw	r30, r24
 152:	80 81       	ld	r24, Z
 154:	88 23       	and	r24, r24
 156:	29 f0       	breq	.+10     	; 0x162 <lcd_puts+0x1a>
 158:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 15c:	89 91       	ld	r24, Y+
 15e:	81 11       	cpse	r24, r1
 160:	fb cf       	rjmp	.-10     	; 0x158 <lcd_puts+0x10>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 168:	cf 93       	push	r28
 16a:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 16c:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 16e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 170:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 172:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 174:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 176:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 178:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	8f ef       	ldi	r24, 0xFF	; 255
 17c:	99 ef       	ldi	r25, 0xF9	; 249
 17e:	01 97       	sbiw	r24, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_init+0x16>
 182:	00 c0       	rjmp	.+0      	; 0x184 <lcd_init+0x1c>
 184:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 186:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 188:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 18a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 18e:	8f e1       	ldi	r24, 0x1F	; 31
 190:	9e e4       	ldi	r25, 0x4E	; 78
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_init+0x2a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_init+0x30>
 198:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 19a:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 19e:	8f ef       	ldi	r24, 0xFF	; 255
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0x3a>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x40>
 1a8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1ae:	8f ef       	ldi	r24, 0xFF	; 255
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_init+0x4a>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <lcd_init+0x50>
 1b8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1ba:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1bc:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	01 97       	sbiw	r24, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <lcd_init+0x5c>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <lcd_init+0x62>
 1ca:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1d8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1dc:	86 e0       	ldi	r24, 0x06	; 6
 1de:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 b4 00 	call	0x168	; 0x168 <lcd_init>

    // Put string(s) at LCD display
    lcd_gotoxy(1, 0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("00:00.0");
 1fa:	80 e0       	ldi	r24, 0x00	; 0
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    lcd_gotoxy(11,0);
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	8b e0       	ldi	r24, 0x0B	; 11
 206:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_putc('a');
 20a:	81 e6       	ldi	r24, 0x61	; 97
 20c:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
    lcd_gotoxy(1,1);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_putc('b');
 218:	82 e6       	ldi	r24, 0x62	; 98
 21a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
    lcd_gotoxy(11,1);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	8b e0       	ldi	r24, 0x0B	; 11
 222:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
    lcd_puts("c");
 226:	88 e0       	ldi	r24, 0x08	; 8
 228:	91 e0       	ldi	r25, 0x01	; 1
 22a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>

    // Configure 8-bit Timer/Counter2 for Stopwatch
    // Enable interrupt and set the overflow prescaler to 16 ms
    TIM2_overflow_16ms();
 22e:	e1 eb       	ldi	r30, 0xB1	; 177
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	87 60       	ori	r24, 0x07	; 7
 236:	80 83       	st	Z, r24
    TIM2_overflow_interrupt_enable();
 238:	e0 e7       	ldi	r30, 0x70	; 112
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	81 60       	ori	r24, 0x01	; 1
 240:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 242:	78 94       	sei
 244:	ff cf       	rjmp	.-2      	; 0x244 <main+0x58>

00000246 <__vector_9>:
 * ISR starts when Timer/Counter2 overflows. Update the stopwatch on
 * LCD display every sixth overflow, ie approximately every 100 ms
 * (6 x 16 ms = 100 ms).
 */
ISR(TIMER2_OVF_vect)
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	00 d0       	rcall	.+0      	; 0x26e <__vector_9+0x28>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
    static uint8_t number_of_overflows = 0;
    static uint8_t tens = 0;        // Tenths of a second
    static uint8_t secs = 0;        // Seconds
      
    // Strings for converting numbers by itoa()
    char lcd_string[2] = "  ";
 272:	80 e2       	ldi	r24, 0x20	; 32
 274:	90 e2       	ldi	r25, 0x20	; 32
 276:	9a 83       	std	Y+2, r25	; 0x02
 278:	89 83       	std	Y+1, r24	; 0x01
    char dot='.';
    number_of_overflows++;
 27a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <number_of_overflows.1946>
 27e:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 280:	86 30       	cpi	r24, 0x06	; 6
 282:	18 f4       	brcc	.+6      	; 0x28a <__vector_9+0x44>
    static uint8_t secs = 0;        // Seconds
      
    // Strings for converting numbers by itoa()
    char lcd_string[2] = "  ";
    char dot='.';
    number_of_overflows++;
 284:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <number_of_overflows.1946>
 288:	50 c0       	rjmp	.+160    	; 0x32a <__vector_9+0xe4>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 28a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <number_of_overflows.1946>
        tens ++;
 28e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tens.1947>
 292:	8f 5f       	subi	r24, 0xFF	; 255
 294:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <tens.1947>
        if(tens>=10){
 298:	8a 30       	cpi	r24, 0x0A	; 10
 29a:	c0 f0       	brcs	.+48     	; 0x2cc <__vector_9+0x86>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 29c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	be 01       	movw	r22, r28
 2a4:	6f 5f       	subi	r22, 0xFF	; 255
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 bb 01 	call	0x376	; 0x376 <__itoa_ncheck>
            itoa(secs, lcd_string, 10);
            lcd_gotoxy(5, 0);
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	85 e0       	ldi	r24, 0x05	; 5
 2b2:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
            lcd_puts(lcd_string);
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
            tens=0;
 2be:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <tens.1947>
            secs++;
 2c2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
            }
        if(secs<=9){
 2cc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2d0:	8a 30       	cpi	r24, 0x0A	; 10
 2d2:	98 f4       	brcc	.+38     	; 0x2fa <__vector_9+0xb4>
 2d4:	4a e0       	ldi	r20, 0x0A	; 10
 2d6:	be 01       	movw	r22, r28
 2d8:	6f 5f       	subi	r22, 0xFF	; 255
 2da:	7f 4f       	sbci	r23, 0xFF	; 255
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 bb 01 	call	0x376	; 0x376 <__itoa_ncheck>
            itoa(secs, lcd_string, 10);
            lcd_gotoxy(5, 0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	85 e0       	ldi	r24, 0x05	; 5
 2e6:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
            lcd_puts(lcd_string);
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
            }
       
        if(secs>9){
 2f2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 2f6:	8a 30       	cpi	r24, 0x0A	; 10
 2f8:	c0 f0       	brcs	.+48     	; 0x32a <__vector_9+0xe4>
            lcd_gotoxy(6, 0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
            lcd_putc(dot);
 302:	8e e2       	ldi	r24, 0x2E	; 46
 304:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_putc>
 308:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 30c:	4a e0       	ldi	r20, 0x0A	; 10
 30e:	be 01       	movw	r22, r28
 310:	6f 5f       	subi	r22, 0xFF	; 255
 312:	7f 4f       	sbci	r23, 0xFF	; 255
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	0e 94 bb 01 	call	0x376	; 0x376 <__itoa_ncheck>
            itoa(secs, lcd_string, 10);
            lcd_gotoxy(4, 0);
 31a:	60 e0       	ldi	r22, 0x00	; 0
 31c:	84 e0       	ldi	r24, 0x04	; 4
 31e:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
            lcd_puts(lcd_string);     
 322:	ce 01       	movw	r24, r28
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
 32a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <tens.1947>
 32e:	4a e0       	ldi	r20, 0x0A	; 10
 330:	be 01       	movw	r22, r28
 332:	6f 5f       	subi	r22, 0xFF	; 255
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 bb 01 	call	0x376	; 0x376 <__itoa_ncheck>
            
        }
          
        }        
        itoa(tens, lcd_string, 10);
        lcd_gotoxy(7, 0);
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	87 e0       	ldi	r24, 0x07	; 7
 340:	0e 94 92 00 	call	0x124	; 0x124 <lcd_gotoxy>
        lcd_puts(lcd_string);
 344:	ce 01       	movw	r24, r28
 346:	01 96       	adiw	r24, 0x01	; 1
 348:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_puts>
    
    // Else do nothing and exit the ISR
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	ff 91       	pop	r31
 356:	ef 91       	pop	r30
 358:	bf 91       	pop	r27
 35a:	af 91       	pop	r26
 35c:	9f 91       	pop	r25
 35e:	8f 91       	pop	r24
 360:	7f 91       	pop	r23
 362:	6f 91       	pop	r22
 364:	5f 91       	pop	r21
 366:	4f 91       	pop	r20
 368:	3f 91       	pop	r19
 36a:	2f 91       	pop	r18
 36c:	0f 90       	pop	r0
 36e:	0f be       	out	0x3f, r0	; 63
 370:	0f 90       	pop	r0
 372:	1f 90       	pop	r1
 374:	18 95       	reti

00000376 <__itoa_ncheck>:
 376:	bb 27       	eor	r27, r27
 378:	4a 30       	cpi	r20, 0x0A	; 10
 37a:	31 f4       	brne	.+12     	; 0x388 <__itoa_ncheck+0x12>
 37c:	99 23       	and	r25, r25
 37e:	22 f4       	brpl	.+8      	; 0x388 <__itoa_ncheck+0x12>
 380:	bd e2       	ldi	r27, 0x2D	; 45
 382:	90 95       	com	r25
 384:	81 95       	neg	r24
 386:	9f 4f       	sbci	r25, 0xFF	; 255
 388:	0c 94 c7 01 	jmp	0x38e	; 0x38e <__utoa_common>

0000038c <__utoa_ncheck>:
 38c:	bb 27       	eor	r27, r27

0000038e <__utoa_common>:
 38e:	fb 01       	movw	r30, r22
 390:	55 27       	eor	r21, r21
 392:	aa 27       	eor	r26, r26
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	aa 1f       	adc	r26, r26
 39a:	a4 17       	cp	r26, r20
 39c:	10 f0       	brcs	.+4      	; 0x3a2 <__utoa_common+0x14>
 39e:	a4 1b       	sub	r26, r20
 3a0:	83 95       	inc	r24
 3a2:	50 51       	subi	r21, 0x10	; 16
 3a4:	b9 f7       	brne	.-18     	; 0x394 <__utoa_common+0x6>
 3a6:	a0 5d       	subi	r26, 0xD0	; 208
 3a8:	aa 33       	cpi	r26, 0x3A	; 58
 3aa:	08 f0       	brcs	.+2      	; 0x3ae <__utoa_common+0x20>
 3ac:	a9 5d       	subi	r26, 0xD9	; 217
 3ae:	a1 93       	st	Z+, r26
 3b0:	00 97       	sbiw	r24, 0x00	; 0
 3b2:	79 f7       	brne	.-34     	; 0x392 <__utoa_common+0x4>
 3b4:	b1 11       	cpse	r27, r1
 3b6:	b1 93       	st	Z+, r27
 3b8:	11 92       	st	Z+, r1
 3ba:	cb 01       	movw	r24, r22
 3bc:	0c 94 e0 01 	jmp	0x3c0	; 0x3c0 <strrev>

000003c0 <strrev>:
 3c0:	dc 01       	movw	r26, r24
 3c2:	fc 01       	movw	r30, r24
 3c4:	67 2f       	mov	r22, r23
 3c6:	71 91       	ld	r23, Z+
 3c8:	77 23       	and	r23, r23
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <strrev+0x4>
 3cc:	32 97       	sbiw	r30, 0x02	; 2
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <strrev+0x18>
 3d0:	7c 91       	ld	r23, X
 3d2:	6d 93       	st	X+, r22
 3d4:	70 83       	st	Z, r23
 3d6:	62 91       	ld	r22, -Z
 3d8:	ae 17       	cp	r26, r30
 3da:	bf 07       	cpc	r27, r31
 3dc:	c8 f3       	brcs	.-14     	; 0x3d0 <strrev+0x10>
 3de:	08 95       	ret

000003e0 <_exit>:
 3e0:	f8 94       	cli

000003e2 <__stop_program>:
 3e2:	ff cf       	rjmp	.-2      	; 0x3e2 <__stop_program>
